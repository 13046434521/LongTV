package com.t.longtv.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.t.longtv.bean.HMTitleBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HMTITLE_BEAN".
*/
public class HMTitleBeanDao extends AbstractDao<HMTitleBean, Void> {

    public static final String TABLENAME = "HMTITLE_BEAN";

    /**
     * Properties of entity HMTitleBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property HmGameName = new Property(0, String.class, "HmGameName", false, "HM_GAME_NAME");
        public final static Property Image = new Property(1, String.class, "image", false, "IMAGE");
        public final static Property Gid = new Property(2, String.class, "gid", false, "GID");
    }


    public HMTitleBeanDao(DaoConfig config) {
        super(config);
    }
    
    public HMTitleBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HMTITLE_BEAN\" (" + //
                "\"HM_GAME_NAME\" TEXT," + // 0: HmGameName
                "\"IMAGE\" TEXT," + // 1: image
                "\"GID\" TEXT);"); // 2: gid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HMTITLE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HMTitleBean entity) {
        stmt.clearBindings();
 
        String HmGameName = entity.getHmGameName();
        if (HmGameName != null) {
            stmt.bindString(1, HmGameName);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(2, image);
        }
 
        String gid = entity.getGid();
        if (gid != null) {
            stmt.bindString(3, gid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HMTitleBean entity) {
        stmt.clearBindings();
 
        String HmGameName = entity.getHmGameName();
        if (HmGameName != null) {
            stmt.bindString(1, HmGameName);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(2, image);
        }
 
        String gid = entity.getGid();
        if (gid != null) {
            stmt.bindString(3, gid);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public HMTitleBean readEntity(Cursor cursor, int offset) {
        HMTitleBean entity = new HMTitleBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // HmGameName
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // image
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // gid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HMTitleBean entity, int offset) {
        entity.setHmGameName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setImage(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(HMTitleBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(HMTitleBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(HMTitleBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
